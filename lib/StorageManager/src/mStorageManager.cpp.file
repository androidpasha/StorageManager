#include "StorageManager.h"

template <typename data_t>
StorageManager<data_t>::StorageManager(data_t &savedData, const char *path){
  LittleFS.begin();
  this->path = path;
  read(savedData);
}

template <typename data_t>
template <typename T>
bool StorageManager<data_t>::write(const T &data) const {
  File file = LittleFS.open(path, "w");
  if (!file)
    return false;
  file.write((byte *)&data, sizeof(data_t) / sizeof(byte));
  file.close();
  return true;
}

template <typename data_t>
template <typename T>
bool StorageManager<data_t>::read(T &savedData)
{
  File file = LittleFS.open(path, "r");
  if (file.size() != sizeof(data_t) or !file)
    return false;
  file.read((byte *)&savedData, file.size());
  file.close();
  return true;
}

template <typename data_t>
template <typename T>
bool StorageManager<data_t>::writeContainer(const T &container) const
{
  File file = LittleFS.open(path, "w");
  if (!file)
    return false;
  for (const auto &e : container)
  {
    file.write((byte *)&e, sizeof(e) / sizeof(byte));
  }
  file.close();
  return true;
}

template <typename data_t>
template <typename T>
bool StorageManager<data_t>::readContainer(T &container)
{
  File file = LittleFS.open(path, "r");
  if (!file)
    return false;
  container.clear();
  auto e = *container.begin(); // Создаем переменную типа элемента контейнера
  while (file.available())
  {
    file.read((byte *)&e, sizeof(e));
    container.insert(container.end(), e);
  }
  file.close();
  return true;
}

template <typename data_t>
template <typename T, typename T2, typename T3>
bool StorageManager<data_t>::readMapGroup(T &container, T2 &first, T3 &second)
{
  File file = LittleFS.open(path, "r");
  if (!file)
    return false;
  container.clear();
  while (file.available())
  {
    file.read((byte *)&first, sizeof(first));
    file.read((byte *)&second, sizeof(second));
    container.insert(std::make_pair(first, second));
  }
  file.close();
  return true;
}

template <typename data_t>
template <typename T, typename T1>
bool StorageManager<data_t>::readUnorderedSetGroup(T &container, T1 &e)
{
  File file = LittleFS.open(path, "r");
  if (!file)
    return false;
  container.clear();
  while (file.available())
  {
    file.read((byte *)&e, sizeof(e));
    container.insert(e);
  }
  file.close();
  return true;
}